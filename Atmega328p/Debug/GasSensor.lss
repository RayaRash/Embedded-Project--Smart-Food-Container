
GasSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000704  00000798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000704  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800176  00800176  0000080e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000080e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e8  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000868  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088c  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049e  00000000  00000000  00002d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009cc  00000000  00000000  00003236  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003c02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 34 03 	jmp	0x668	; 0x668 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 37       	cpi	r26, 0x76	; 118
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e7       	ldi	r26, 0x76	; 118
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 38       	cpi	r26, 0x82	; 130
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 42 02 	call	0x484	; 0x484 <main>
  9e:	0c 94 80 03 	jmp	0x700	; 0x700 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCDBusyLoop>:
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
	LCDByte(byte,1);
	LCDBusyLoop();
}
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	80 7f       	andi	r24, 0xF0	; 240
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	80 62       	ori	r24, 0x20	; 32
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	8f 7b       	andi	r24, 0xBF	; 191
  b6:	8b b9       	out	0x0b, r24	; 11
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	8a 95       	dec	r24
  bc:	f1 f7       	brne	.-4      	; 0xba <LCDBusyLoop+0x14>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <LCDBusyLoop+0x1a>
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	92 e0       	ldi	r25, 0x02	; 2
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCDBusyLoop+0x22>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCDBusyLoop+0x28>
  ce:	83 b1       	in	r24, 0x03	; 3
  d0:	82 95       	swap	r24
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	92 e0       	ldi	r25, 0x02	; 2
  d6:	9a 95       	dec	r25
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCDBusyLoop+0x30>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCDBusyLoop+0x36>
  dc:	9b b1       	in	r25, 0x0b	; 11
  de:	9f 7e       	andi	r25, 0xEF	; 239
  e0:	9b b9       	out	0x0b, r25	; 11
  e2:	95 e0       	ldi	r25, 0x05	; 5
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCDBusyLoop+0x3e>
  e8:	00 00       	nop
  ea:	9b b1       	in	r25, 0x0b	; 11
  ec:	90 61       	ori	r25, 0x10	; 16
  ee:	9b b9       	out	0x0b, r25	; 11
  f0:	92 e0       	ldi	r25, 0x02	; 2
  f2:	9a 95       	dec	r25
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCDBusyLoop+0x4c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCDBusyLoop+0x52>
  f8:	93 b1       	in	r25, 0x03	; 3
  fa:	80 78       	andi	r24, 0x80	; 128
  fc:	92 e0       	ldi	r25, 0x02	; 2
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <LCDBusyLoop+0x58>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCDBusyLoop+0x5e>
 104:	9b b1       	in	r25, 0x0b	; 11
 106:	9f 7e       	andi	r25, 0xEF	; 239
 108:	9b b9       	out	0x0b, r25	; 11
 10a:	95 e0       	ldi	r25, 0x05	; 5
 10c:	9a 95       	dec	r25
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCDBusyLoop+0x66>
 110:	00 00       	nop
 112:	81 11       	cpse	r24, r1
 114:	d5 cf       	rjmp	.-86     	; 0xc0 <LCDBusyLoop+0x1a>
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	8f 7d       	andi	r24, 0xDF	; 223
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	84 b1       	in	r24, 0x04	; 4
 11e:	8f 60       	ori	r24, 0x0F	; 15
 120:	84 b9       	out	0x04, r24	; 4
 122:	08 95       	ret

00000124 <LCDByte>:
 124:	28 2f       	mov	r18, r24
 126:	22 95       	swap	r18
 128:	2f 70       	andi	r18, 0x0F	; 15
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <LCDByte+0x14>
 130:	9b b1       	in	r25, 0x0b	; 11
 132:	9f 7b       	andi	r25, 0xBF	; 191
 134:	9b b9       	out	0x0b, r25	; 11
 136:	03 c0       	rjmp	.+6      	; 0x13e <LCDByte+0x1a>
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	90 64       	ori	r25, 0x40	; 64
 13c:	9b b9       	out	0x0b, r25	; 11
 13e:	92 e0       	ldi	r25, 0x02	; 2
 140:	9a 95       	dec	r25
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDByte+0x1c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCDByte+0x22>
 146:	9b b1       	in	r25, 0x0b	; 11
 148:	90 61       	ori	r25, 0x10	; 16
 14a:	9b b9       	out	0x0b, r25	; 11
 14c:	95 b1       	in	r25, 0x05	; 5
 14e:	90 7f       	andi	r25, 0xF0	; 240
 150:	92 2b       	or	r25, r18
 152:	95 b9       	out	0x05, r25	; 5
 154:	95 e0       	ldi	r25, 0x05	; 5
 156:	9a 95       	dec	r25
 158:	f1 f7       	brne	.-4      	; 0x156 <LCDByte+0x32>
 15a:	00 00       	nop
 15c:	9b b1       	in	r25, 0x0b	; 11
 15e:	9f 7e       	andi	r25, 0xEF	; 239
 160:	9b b9       	out	0x0b, r25	; 11
 162:	95 e0       	ldi	r25, 0x05	; 5
 164:	9a 95       	dec	r25
 166:	f1 f7       	brne	.-4      	; 0x164 <LCDByte+0x40>
 168:	00 00       	nop
 16a:	9b b1       	in	r25, 0x0b	; 11
 16c:	90 61       	ori	r25, 0x10	; 16
 16e:	9b b9       	out	0x0b, r25	; 11
 170:	95 b1       	in	r25, 0x05	; 5
 172:	90 7f       	andi	r25, 0xF0	; 240
 174:	89 2b       	or	r24, r25
 176:	85 b9       	out	0x05, r24	; 5
 178:	85 e0       	ldi	r24, 0x05	; 5
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCDByte+0x56>
 17e:	00 00       	nop
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	8f 7e       	andi	r24, 0xEF	; 239
 184:	8b b9       	out	0x0b, r24	; 11
 186:	95 e0       	ldi	r25, 0x05	; 5
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDByte+0x64>
 18c:	00 00       	nop
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
 192:	08 95       	ret

00000194 <LCDWriteString>:
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24
 19e:	1c c0       	rjmp	.+56     	; 0x1d8 <LCDWriteString+0x44>
 1a0:	85 32       	cpi	r24, 0x25	; 37
 1a2:	b1 f4       	brne	.+44     	; 0x1d0 <LCDWriteString+0x3c>
 1a4:	8e 01       	movw	r16, r28
 1a6:	0f 5f       	subi	r16, 0xFF	; 255
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	80 53       	subi	r24, 0x30	; 48
 1ae:	88 30       	cpi	r24, 0x08	; 8
 1b0:	28 f4       	brcc	.+10     	; 0x1bc <LCDWriteString+0x28>
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
 1b8:	e8 01       	movw	r28, r16
 1ba:	0d c0       	rjmp	.+26     	; 0x1d6 <LCDWriteString+0x42>
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	85 e2       	ldi	r24, 0x25	; 37
 1c0:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
 1cc:	e8 01       	movw	r28, r16
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <LCDWriteString+0x42>
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	88 81       	ld	r24, Y
 1da:	81 11       	cpse	r24, r1
 1dc:	e1 cf       	rjmp	.-62     	; 0x1a0 <LCDWriteString+0xc>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <LCDWriteInt>:
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <LCDWriteInt+0xe>
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <LCDWriteInt+0x10>
 1f8:	1f 92       	push	r1
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	7b 01       	movw	r14, r22
 200:	fe 01       	movw	r30, r28
 202:	31 96       	adiw	r30, 0x01	; 1
 204:	25 e0       	ldi	r18, 0x05	; 5
 206:	df 01       	movw	r26, r30
 208:	1d 92       	st	X+, r1
 20a:	2a 95       	dec	r18
 20c:	e9 f7       	brne	.-6      	; 0x208 <LCDWriteInt+0x20>
 20e:	24 e0       	ldi	r18, 0x04	; 4
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	0f c0       	rjmp	.+30     	; 0x232 <LCDWriteInt+0x4a>
 214:	6a e0       	ldi	r22, 0x0A	; 10
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 21c:	e1 e0       	ldi	r30, 0x01	; 1
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ec 0f       	add	r30, r28
 222:	fd 1f       	adc	r31, r29
 224:	e2 0f       	add	r30, r18
 226:	f3 1f       	adc	r31, r19
 228:	80 83       	st	Z, r24
 22a:	86 2f       	mov	r24, r22
 22c:	97 2f       	mov	r25, r23
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	31 09       	sbc	r19, r1
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	79 f7       	brne	.-34     	; 0x214 <LCDWriteInt+0x2c>
 236:	bf ef       	ldi	r27, 0xFF	; 255
 238:	eb 16       	cp	r14, r27
 23a:	fb 06       	cpc	r15, r27
 23c:	81 f4       	brne	.+32     	; 0x25e <LCDWriteInt+0x76>
 23e:	03 c0       	rjmp	.+6      	; 0x246 <LCDWriteInt+0x5e>
 240:	0f 5f       	subi	r16, 0xFF	; 255
 242:	1f 4f       	sbci	r17, 0xFF	; 255
 244:	02 c0       	rjmp	.+4      	; 0x24a <LCDWriteInt+0x62>
 246:	00 e0       	ldi	r16, 0x00	; 0
 248:	10 e0       	ldi	r17, 0x00	; 0
 24a:	e1 e0       	ldi	r30, 0x01	; 1
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	ec 0f       	add	r30, r28
 250:	fd 1f       	adc	r31, r29
 252:	e0 0f       	add	r30, r16
 254:	f1 1f       	adc	r31, r17
 256:	20 81       	ld	r18, Z
 258:	22 23       	and	r18, r18
 25a:	91 f3       	breq	.-28     	; 0x240 <LCDWriteInt+0x58>
 25c:	04 c0       	rjmp	.+8      	; 0x266 <LCDWriteInt+0x7e>
 25e:	05 e0       	ldi	r16, 0x05	; 5
 260:	10 e0       	ldi	r17, 0x00	; 0
 262:	0e 19       	sub	r16, r14
 264:	1f 09       	sbc	r17, r15
 266:	99 23       	and	r25, r25
 268:	94 f4       	brge	.+36     	; 0x28e <LCDWriteInt+0xa6>
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	8d e2       	ldi	r24, 0x2D	; 45
 26e:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
 272:	0d c0       	rjmp	.+26     	; 0x28e <LCDWriteInt+0xa6>
 274:	e1 e0       	ldi	r30, 0x01	; 1
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ec 0f       	add	r30, r28
 27a:	fd 1f       	adc	r31, r29
 27c:	e0 0f       	add	r30, r16
 27e:	f1 1f       	adc	r31, r17
 280:	80 81       	ld	r24, Z
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	80 5d       	subi	r24, 0xD0	; 208
 286:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
 28a:	0f 5f       	subi	r16, 0xFF	; 255
 28c:	1f 4f       	sbci	r17, 0xFF	; 255
 28e:	05 30       	cpi	r16, 0x05	; 5
 290:	11 05       	cpc	r17, r1
 292:	84 f3       	brlt	.-32     	; 0x274 <LCDWriteInt+0x8c>
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	08 95       	ret

000002ac <LCDGotoXY>:
 2ac:	84 31       	cpi	r24, 0x14	; 20
 2ae:	78 f4       	brcc	.+30     	; 0x2ce <LCDGotoXY+0x22>
 2b0:	62 30       	cpi	r22, 0x02	; 2
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <LCDGotoXY+0x14>
 2b4:	63 30       	cpi	r22, 0x03	; 3
 2b6:	31 f0       	breq	.+12     	; 0x2c4 <LCDGotoXY+0x18>
 2b8:	61 30       	cpi	r22, 0x01	; 1
 2ba:	29 f4       	brne	.+10     	; 0x2c6 <LCDGotoXY+0x1a>
 2bc:	80 64       	ori	r24, 0x40	; 64
 2be:	03 c0       	rjmp	.+6      	; 0x2c6 <LCDGotoXY+0x1a>
 2c0:	8c 5e       	subi	r24, 0xEC	; 236
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <LCDGotoXY+0x1a>
 2c4:	8c 5a       	subi	r24, 0xAC	; 172
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
 2ce:	08 95       	ret

000002d0 <LCDInit>:
 2d0:	cf 93       	push	r28
 2d2:	c8 2f       	mov	r28, r24
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	86 e7       	ldi	r24, 0x76	; 118
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <LCDInit+0xa>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCDInit+0x14>
 2e4:	00 00       	nop
 2e6:	84 b1       	in	r24, 0x04	; 4
 2e8:	8f 60       	ori	r24, 0x0F	; 15
 2ea:	84 b9       	out	0x04, r24	; 4
 2ec:	8a b1       	in	r24, 0x0a	; 10
 2ee:	80 61       	ori	r24, 0x10	; 16
 2f0:	8a b9       	out	0x0a, r24	; 10
 2f2:	8a b1       	in	r24, 0x0a	; 10
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	8a b9       	out	0x0a, r24	; 10
 2f8:	8a b1       	in	r24, 0x0a	; 10
 2fa:	80 62       	ori	r24, 0x20	; 32
 2fc:	8a b9       	out	0x0a, r24	; 10
 2fe:	85 b1       	in	r24, 0x05	; 5
 300:	80 7f       	andi	r24, 0xF0	; 240
 302:	85 b9       	out	0x05, r24	; 5
 304:	8b b1       	in	r24, 0x0b	; 11
 306:	8f 7e       	andi	r24, 0xEF	; 239
 308:	8b b9       	out	0x0b, r24	; 11
 30a:	8b b1       	in	r24, 0x0b	; 11
 30c:	8f 7d       	andi	r24, 0xDF	; 223
 30e:	8b b9       	out	0x0b, r24	; 11
 310:	8b b1       	in	r24, 0x0b	; 11
 312:	8f 7b       	andi	r24, 0xBF	; 191
 314:	8b b9       	out	0x0b, r24	; 11
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCDInit+0x48>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCDInit+0x4a>
 31a:	00 00       	nop
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	80 61       	ori	r24, 0x10	; 16
 320:	8b b9       	out	0x0b, r24	; 11
 322:	85 b1       	in	r24, 0x05	; 5
 324:	82 60       	ori	r24, 0x02	; 2
 326:	85 b9       	out	0x05, r24	; 5
 328:	25 e0       	ldi	r18, 0x05	; 5
 32a:	2a 95       	dec	r18
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCDInit+0x5a>
 32e:	00 00       	nop
 330:	8b b1       	in	r24, 0x0b	; 11
 332:	8f 7e       	andi	r24, 0xEF	; 239
 334:	8b b9       	out	0x0b, r24	; 11
 336:	85 e0       	ldi	r24, 0x05	; 5
 338:	8a 95       	dec	r24
 33a:	f1 f7       	brne	.-4      	; 0x338 <LCDInit+0x68>
 33c:	00 00       	nop
 33e:	0e 94 53 00 	call	0xa6	; 0xa6 <LCDBusyLoop>
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	8c 2f       	mov	r24, r28
 346:	8c 60       	ori	r24, 0x0C	; 12
 348:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	88 e2       	ldi	r24, 0x28	; 40
 350:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDGotoXY>
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <initUSART>:
#include "lcd.c"
void action(void);

void initUSART(void)
{
	UBRR0H = (unsigned char)(UBRR_VALUE>>8);
 360:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)(UBRR_VALUE);
 364:	87 e6       	ldi	r24, 0x67	; 103
 366:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 36a:	88 e9       	ldi	r24, 0x98	; 152
 36c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (3<<UCSZ00);
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	sei();
 376:	78 94       	sei
 378:	08 95       	ret

0000037a <receiveUSART>:
}

unsigned char receiveUSART(void)
{
	while(!(UCSR0A & (1<<RXC0)));
 37a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 37e:	88 23       	and	r24, r24
 380:	e4 f7       	brge	.-8      	; 0x37a <receiveUSART>
	return UDR0;
 382:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 386:	08 95       	ret

00000388 <initADC>:
void initADC(void)
{
	ADCSRA |= (1<<ADEN);
 388:	ea e7       	ldi	r30, 0x7A	; 122
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	80 83       	st	Z, r24
	ADCSRA |= 0B00000111;
 392:	80 81       	ld	r24, Z
 394:	87 60       	ori	r24, 0x07	; 7
 396:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 398:	80 81       	ld	r24, Z
 39a:	80 64       	ori	r24, 0x40	; 64
 39c:	80 83       	st	Z, r24
 39e:	08 95       	ret

000003a0 <ModeCheck>:
}
void ModeCheck(void)
{
	if (Mode == 1)
 3a0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <Mode>
 3a4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <Mode+0x1>
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	49 f4       	brne	.+18     	; 0x3be <ModeCheck+0x1e>
	{
		LCDWriteStringXY(0,1,"Mode: Fruits");
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDGotoXY>
 3b4:	84 e0       	ldi	r24, 0x04	; 4
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 ca 00 	call	0x194	; 0x194 <LCDWriteString>
 3bc:	08 95       	ret
	}
	else
	{
		LCDWriteStringXY(0,1,"Mode: Vegetables");
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDGotoXY>
 3c6:	81 e1       	ldi	r24, 0x11	; 17
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 ca 00 	call	0x194	; 0x194 <LCDWriteString>
 3ce:	08 95       	ret

000003d0 <Edible>:
	}
}
void Edible(void)
{
	LCDClear();
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
	ModeCheck();
 3d8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ModeCheck>
	LCDWriteStringXY(0,2,"Food Status:");
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDGotoXY>
 3e4:	82 e2       	ldi	r24, 0x22	; 34
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 ca 00 	call	0x194	; 0x194 <LCDWriteString>
	LCDWriteStringXY(1,3,"Edible                     ");
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDGotoXY>
 3f4:	8f e2       	ldi	r24, 0x2F	; 47
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	0e 94 ca 00 	call	0x194	; 0x194 <LCDWriteString>
	PreHumRXData = rxHumData;
 3fc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rxHumData>
 400:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <rxHumData+0x1>
 404:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <PreHumRXData+0x1>
 408:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <PreHumRXData>
	PreGasData = GasData;
 40c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 410:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 414:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <PreGasData+0x1>
 418:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PreGasData>
	PORTB |= 0B00010000;
 41c:	85 b1       	in	r24, 0x05	; 5
 41e:	80 61       	ori	r24, 0x10	; 16
 420:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0B00011111;
 422:	85 b1       	in	r24, 0x05	; 5
 424:	8f 71       	andi	r24, 0x1F	; 31
 426:	85 b9       	out	0x05, r24	; 5
 428:	08 95       	ret

0000042a <Spoiled>:
}
void Spoiled(void)
{
	LCDClear();
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
	ModeCheck();
 432:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ModeCheck>
	LCDWriteStringXY(0,2,"Food Status:");
 436:	62 e0       	ldi	r22, 0x02	; 2
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDGotoXY>
 43e:	82 e2       	ldi	r24, 0x22	; 34
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 ca 00 	call	0x194	; 0x194 <LCDWriteString>
	LCDWriteStringXY(0,3,"Spoiled                      ");
 446:	63 e0       	ldi	r22, 0x03	; 3
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDGotoXY>
 44e:	8b e4       	ldi	r24, 0x4B	; 75
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 ca 00 	call	0x194	; 0x194 <LCDWriteString>
	PreHumRXData = rxHumData;
 456:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rxHumData>
 45a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <rxHumData+0x1>
 45e:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <PreHumRXData+0x1>
 462:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <PreHumRXData>
	PreGasData = GasData;
 466:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 46a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 46e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <PreGasData+0x1>
 472:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PreGasData>
	PORTB |= 0B00100010;
 476:	85 b1       	in	r24, 0x05	; 5
 478:	82 62       	ori	r24, 0x22	; 34
 47a:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0B00101111;
 47c:	85 b1       	in	r24, 0x05	; 5
 47e:	8f 72       	andi	r24, 0x2F	; 47
 480:	85 b9       	out	0x05, r24	; 5
 482:	08 95       	ret

00000484 <main>:
}

int main(void)
{
	EICRA |= 0x03;
 484:	e9 e6       	ldi	r30, 0x69	; 105
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	83 60       	ori	r24, 0x03	; 3
 48c:	80 83       	st	Z, r24
	EIMSK |= 0x01;
 48e:	8d b3       	in	r24, 0x1d	; 29
 490:	81 60       	ori	r24, 0x01	; 1
 492:	8d bb       	out	0x1d, r24	; 29
	sei();
 494:	78 94       	sei
	
	initUSART();
 496:	0e 94 b0 01 	call	0x360	; 0x360 <initUSART>
	DDRB |= 0B00000010; // PORT B PIN 1 as output
 49a:	84 b1       	in	r24, 0x04	; 4
 49c:	82 60       	ori	r24, 0x02	; 2
 49e:	84 b9       	out	0x04, r24	; 4
	DDRB |= 0B00000100; // PORT B PIN 2 as output
 4a0:	84 b1       	in	r24, 0x04	; 4
 4a2:	84 60       	ori	r24, 0x04	; 4
 4a4:	84 b9       	out	0x04, r24	; 4
	initADC();
 4a6:	0e 94 c4 01 	call	0x388	; 0x388 <initADC>
	LCDInit(LS_BLINK);
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCDInit>
	
	while(1)
	{
		if (i==4)
 4b0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 4b4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
 4b8:	04 97       	sbiw	r24, 0x04	; 4
 4ba:	e1 f4       	brne	.+56     	; 0x4f4 <main+0x70>
		{
			LCDWriteStringXY(13,0,"g");
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	8d e0       	ldi	r24, 0x0D	; 13
 4c0:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDGotoXY>
 4c4:	89 e6       	ldi	r24, 0x69	; 105
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 ca 00 	call	0x194	; 0x194 <LCDWriteString>
			LCDFirstLine();
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	80 e8       	ldi	r24, 0x80	; 128
 4d0:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
			LCDCur();
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	8c e0       	ldi	r24, 0x0C	; 12
 4d8:	0e 94 92 00 	call	0x124	; 0x124 <LCDByte>
			LCDWriteStringXY(0,0,"Weight = ");
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDGotoXY>
 4e4:	8b e6       	ldi	r24, 0x6B	; 107
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 ca 00 	call	0x194	; 0x194 <LCDWriteString>
			//LCDLeftLine();
			i = 0;
 4ec:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__data_end+0x1>
 4f0:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
		/*int digit1s = 0;
		int digit10s = 0;
		int digit100s = 0;
		int digit1000s = 0;
		*/
		ADMUX = (ADMUX & 0xF0) | 0;
 4f4:	ec e7       	ldi	r30, 0x7C	; 124
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	80 7f       	andi	r24, 0xF0	; 240
 4fc:	80 83       	st	Z, r24
		ADMUX &= 0B00111111;
 4fe:	80 81       	ld	r24, Z
 500:	8f 73       	andi	r24, 0x3F	; 63
 502:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC);
 504:	ea e7       	ldi	r30, 0x7A	; 122
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	80 64       	ori	r24, 0x40	; 64
 50c:	80 83       	st	Z, r24
		
		while (ADCSRA & (1<<ADSC));
 50e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 512:	86 fd       	sbrc	r24, 6
 514:	fc cf       	rjmp	.-8      	; 0x50e <main+0x8a>
		ADC_value = ADC;
 516:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 51a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 51e:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <ADC_value+0x1>
 522:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <ADC_value>
		//LCDWriteInt(ADC_value,-1);
		//_delay_ms(1000);
		if (PIND & 0B10000000)
 526:	4f 9b       	sbis	0x09, 7	; 9
 528:	07 c0       	rjmp	.+14     	; 0x538 <main+0xb4>
		{
			Mode = 1;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <Mode+0x1>
 532:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <Mode>
 536:	06 c0       	rjmp	.+12     	; 0x544 <main+0xc0>
			//LCDWriteStringXY(0,1,"Mode: Fruits");
		}
		else
		{
			Mode = 2;
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <Mode+0x1>
 540:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <Mode>
			//LCDWriteStringXY(0,1,"Mode: Vegetables");
		}
		if (Mode == 1)
 544:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <Mode>
 548:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <Mode+0x1>
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	99 f4       	brne	.+38     	; 0x576 <main+0xf2>
		{
			//Fruit
			if(ADC_value>100)
 550:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ADC_value>
 554:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ADC_value+0x1>
 558:	85 36       	cpi	r24, 0x65	; 101
 55a:	91 05       	cpc	r25, r1
 55c:	38 f0       	brcs	.+14     	; 0x56c <main+0xe8>
			{
				GasData = 1;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 566:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 56a:	19 c0       	rjmp	.+50     	; 0x59e <main+0x11a>
			}
			else
			{
				GasData = 0;
 56c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 570:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 574:	14 c0       	rjmp	.+40     	; 0x59e <main+0x11a>
			}
		}
		else
		{
			//veg
			if(ADC_value>120)
 576:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ADC_value>
 57a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ADC_value+0x1>
 57e:	89 37       	cpi	r24, 0x79	; 121
 580:	91 05       	cpc	r25, r1
 582:	38 f0       	brcs	.+14     	; 0x592 <main+0x10e>
			{
				GasData = 3;
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 58c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 590:	06 c0       	rjmp	.+12     	; 0x59e <main+0x11a>
			}
			else
			{
				GasData = 2;
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 59a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		
		//_delay_ms(50);
		//LCDWriteInt(rxData,-1);
		if (PreHumRXData != rxHumData || PreGasData != GasData)
 59e:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <PreHumRXData>
 5a2:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <PreHumRXData+0x1>
 5a6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rxHumData>
 5aa:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <rxHumData+0x1>
 5ae:	28 17       	cp	r18, r24
 5b0:	39 07       	cpc	r19, r25
 5b2:	61 f4       	brne	.+24     	; 0x5cc <main+0x148>
 5b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <PreGasData>
 5b8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <PreGasData+0x1>
 5bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5c4:	28 17       	cp	r18, r24
 5c6:	39 07       	cpc	r19, r25
 5c8:	09 f4       	brne	.+2      	; 0x5cc <main+0x148>
 5ca:	72 cf       	rjmp	.-284    	; 0x4b0 <main+0x2c>
		{
			if(GasData == 1 || GasData == 3)
 5cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	31 f0       	breq	.+12     	; 0x5e4 <main+0x160>
 5d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5e0:	03 97       	sbiw	r24, 0x03	; 3
 5e2:	19 f4       	brne	.+6      	; 0x5ea <main+0x166>
			{
				Spoiled();
 5e4:	0e 94 15 02 	call	0x42a	; 0x42a <Spoiled>
 5e8:	63 cf       	rjmp	.-314    	; 0x4b0 <main+0x2c>
			}
			else
			{
				if (rxHumData == 1)
 5ea:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rxHumData>
 5ee:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <rxHumData+0x1>
 5f2:	01 97       	sbiw	r24, 0x01	; 1
 5f4:	19 f4       	brne	.+6      	; 0x5fc <main+0x178>
				{
					Spoiled();
 5f6:	0e 94 15 02 	call	0x42a	; 0x42a <Spoiled>
 5fa:	5a cf       	rjmp	.-332    	; 0x4b0 <main+0x2c>
				}
				else
				{
					Edible();
 5fc:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Edible>
 600:	57 cf       	rjmp	.-338    	; 0x4b0 <main+0x2c>

00000602 <action>:
	return 0;
}

void action(void)
{
	rxData = receiveUSART();
 602:	0e 94 bd 01 	call	0x37a	; 0x37a <receiveUSART>
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <rxData+0x1>
 60c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <rxData>
	//LCDWriteInt(rxData,-1);
	if (rxData < 65)
 610:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rxData>
 614:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <rxData+0x1>
 618:	81 34       	cpi	r24, 0x41	; 65
 61a:	91 05       	cpc	r25, r1
 61c:	90 f4       	brcc	.+36     	; 0x642 <action+0x40>
	{
		LCDWriteInt(rxData,1);
 61e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rxData>
 622:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <rxData+0x1>
 626:	61 e0       	ldi	r22, 0x01	; 1
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDWriteInt>
		i++;
 62e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 632:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
 636:	01 96       	adiw	r24, 0x01	; 1
 638:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <__data_end+0x1>
 63c:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
 640:	08 95       	ret
		//LCDWriteStringXY(4,1,"gfsghdfhg");	
	}
	else
	{
		if ((rxData == 65))
 642:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rxData>
 646:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <rxData+0x1>
 64a:	81 34       	cpi	r24, 0x41	; 65
 64c:	91 05       	cpc	r25, r1
 64e:	39 f4       	brne	.+14     	; 0x65e <action+0x5c>
		{
			rxHumData = 1;
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <rxHumData+0x1>
 658:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <rxHumData>
 65c:	08 95       	ret
			//LCDHexDumpXY(1,2,rxData);
		}
		else
		{
			rxHumData = 0;
 65e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <rxHumData+0x1>
 662:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <rxHumData>
 666:	08 95       	ret

00000668 <__vector_18>:
		}	
	}	
}
ISR (USART_RX_vect)
{
 668:	1f 92       	push	r1
 66a:	0f 92       	push	r0
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	0f 92       	push	r0
 670:	11 24       	eor	r1, r1
 672:	2f 93       	push	r18
 674:	3f 93       	push	r19
 676:	4f 93       	push	r20
 678:	5f 93       	push	r21
 67a:	6f 93       	push	r22
 67c:	7f 93       	push	r23
 67e:	8f 93       	push	r24
 680:	9f 93       	push	r25
 682:	af 93       	push	r26
 684:	bf 93       	push	r27
 686:	ef 93       	push	r30
 688:	ff 93       	push	r31
	action();
 68a:	0e 94 01 03 	call	0x602	; 0x602 <action>
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	bf 91       	pop	r27
 694:	af 91       	pop	r26
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	7f 91       	pop	r23
 69c:	6f 91       	pop	r22
 69e:	5f 91       	pop	r21
 6a0:	4f 91       	pop	r20
 6a2:	3f 91       	pop	r19
 6a4:	2f 91       	pop	r18
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

000006b0 <__divmodhi4>:
 6b0:	97 fb       	bst	r25, 7
 6b2:	07 2e       	mov	r0, r23
 6b4:	16 f4       	brtc	.+4      	; 0x6ba <__divmodhi4+0xa>
 6b6:	00 94       	com	r0
 6b8:	07 d0       	rcall	.+14     	; 0x6c8 <__divmodhi4_neg1>
 6ba:	77 fd       	sbrc	r23, 7
 6bc:	09 d0       	rcall	.+18     	; 0x6d0 <__divmodhi4_neg2>
 6be:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__udivmodhi4>
 6c2:	07 fc       	sbrc	r0, 7
 6c4:	05 d0       	rcall	.+10     	; 0x6d0 <__divmodhi4_neg2>
 6c6:	3e f4       	brtc	.+14     	; 0x6d6 <__divmodhi4_exit>

000006c8 <__divmodhi4_neg1>:
 6c8:	90 95       	com	r25
 6ca:	81 95       	neg	r24
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	08 95       	ret

000006d0 <__divmodhi4_neg2>:
 6d0:	70 95       	com	r23
 6d2:	61 95       	neg	r22
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255

000006d6 <__divmodhi4_exit>:
 6d6:	08 95       	ret

000006d8 <__udivmodhi4>:
 6d8:	aa 1b       	sub	r26, r26
 6da:	bb 1b       	sub	r27, r27
 6dc:	51 e1       	ldi	r21, 0x11	; 17
 6de:	07 c0       	rjmp	.+14     	; 0x6ee <__udivmodhi4_ep>

000006e0 <__udivmodhi4_loop>:
 6e0:	aa 1f       	adc	r26, r26
 6e2:	bb 1f       	adc	r27, r27
 6e4:	a6 17       	cp	r26, r22
 6e6:	b7 07       	cpc	r27, r23
 6e8:	10 f0       	brcs	.+4      	; 0x6ee <__udivmodhi4_ep>
 6ea:	a6 1b       	sub	r26, r22
 6ec:	b7 0b       	sbc	r27, r23

000006ee <__udivmodhi4_ep>:
 6ee:	88 1f       	adc	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	5a 95       	dec	r21
 6f4:	a9 f7       	brne	.-22     	; 0x6e0 <__udivmodhi4_loop>
 6f6:	80 95       	com	r24
 6f8:	90 95       	com	r25
 6fa:	bc 01       	movw	r22, r24
 6fc:	cd 01       	movw	r24, r26
 6fe:	08 95       	ret

00000700 <_exit>:
 700:	f8 94       	cli

00000702 <__stop_program>:
 702:	ff cf       	rjmp	.-2      	; 0x702 <__stop_program>
